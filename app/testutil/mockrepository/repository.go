// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/domain/repository/repository_interface.go

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domerr "github.com/takahiroaoki/grpc-sample/app/domain/domerr"
	entity "github.com/takahiroaoki/grpc-sample/app/domain/entity"
	repository "github.com/takahiroaoki/grpc-sample/app/domain/repository"
)

// MockDemoRepository is a mock of DemoRepository interface.
type MockDemoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDemoRepositoryMockRecorder
}

// MockDemoRepositoryMockRecorder is the mock recorder for MockDemoRepository.
type MockDemoRepositoryMockRecorder struct {
	mock *MockDemoRepository
}

// NewMockDemoRepository creates a new mock instance.
func NewMockDemoRepository(ctrl *gomock.Controller) *MockDemoRepository {
	mock := &MockDemoRepository{ctrl: ctrl}
	mock.recorder = &MockDemoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDemoRepository) EXPECT() *MockDemoRepositoryMockRecorder {
	return m.recorder
}

// CreateOneUser mocks base method.
func (m *MockDemoRepository) CreateOneUser(u entity.User) (*entity.User, domerr.DomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOneUser", u)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(domerr.DomErr)
	return ret0, ret1
}

// CreateOneUser indicates an expected call of CreateOneUser.
func (mr *MockDemoRepositoryMockRecorder) CreateOneUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOneUser", reflect.TypeOf((*MockDemoRepository)(nil).CreateOneUser), u)
}

// SelectOneUserByUserId mocks base method.
func (m *MockDemoRepository) SelectOneUserByUserId(userId string) (*entity.User, domerr.DomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOneUserByUserId", userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(domerr.DomErr)
	return ret0, ret1
}

// SelectOneUserByUserId indicates an expected call of SelectOneUserByUserId.
func (mr *MockDemoRepositoryMockRecorder) SelectOneUserByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOneUserByUserId", reflect.TypeOf((*MockDemoRepository)(nil).SelectOneUserByUserId), userId)
}

// Transaction mocks base method.
func (m *MockDemoRepository) Transaction(arg0 func(repository.DemoRepository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockDemoRepositoryMockRecorder) Transaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockDemoRepository)(nil).Transaction), arg0)
}
