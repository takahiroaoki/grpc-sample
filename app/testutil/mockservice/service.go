// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/domain/service/service_interface.go

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domerr "github.com/takahiroaoki/grpc-sample/app/domain/domerr"
	entity "github.com/takahiroaoki/grpc-sample/app/domain/entity"
	repository "github.com/takahiroaoki/grpc-sample/app/domain/repository"
)

// MockCreateUserService is a mock of CreateUserService interface.
type MockCreateUserService struct {
	ctrl     *gomock.Controller
	recorder *MockCreateUserServiceMockRecorder
}

// MockCreateUserServiceMockRecorder is the mock recorder for MockCreateUserService.
type MockCreateUserServiceMockRecorder struct {
	mock *MockCreateUserService
}

// NewMockCreateUserService creates a new mock instance.
func NewMockCreateUserService(ctrl *gomock.Controller) *MockCreateUserService {
	mock := &MockCreateUserService{ctrl: ctrl}
	mock.recorder = &MockCreateUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateUserService) EXPECT() *MockCreateUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockCreateUserService) CreateUser(ctx context.Context, dr repository.DemoRepository, u entity.User) (*entity.User, domerr.DomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, dr, u)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(domerr.DomErr)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCreateUserServiceMockRecorder) CreateUser(ctx, dr, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCreateUserService)(nil).CreateUser), ctx, dr, u)
}

// MockGetUserInfoService is a mock of GetUserInfoService interface.
type MockGetUserInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockGetUserInfoServiceMockRecorder
}

// MockGetUserInfoServiceMockRecorder is the mock recorder for MockGetUserInfoService.
type MockGetUserInfoServiceMockRecorder struct {
	mock *MockGetUserInfoService
}

// NewMockGetUserInfoService creates a new mock instance.
func NewMockGetUserInfoService(ctrl *gomock.Controller) *MockGetUserInfoService {
	mock := &MockGetUserInfoService{ctrl: ctrl}
	mock.recorder = &MockGetUserInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUserInfoService) EXPECT() *MockGetUserInfoServiceMockRecorder {
	return m.recorder
}

// GetUserByUserId mocks base method.
func (m *MockGetUserInfoService) GetUserByUserId(ctx context.Context, dr repository.DemoRepository, userId string) (*entity.User, domerr.DomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserId", ctx, dr, userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(domerr.DomErr)
	return ret0, ret1
}

// GetUserByUserId indicates an expected call of GetUserByUserId.
func (mr *MockGetUserInfoServiceMockRecorder) GetUserByUserId(ctx, dr, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserId", reflect.TypeOf((*MockGetUserInfoService)(nil).GetUserByUserId), ctx, dr, userId)
}
