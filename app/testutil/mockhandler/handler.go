// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/domain/handler/handler_interface.go

// Package mockhandler is a generated GoMock package.
package mockhandler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domerr "github.com/takahiroaoki/grpc-sample/app/domain/domerr"
	handler "github.com/takahiroaoki/grpc-sample/app/domain/handler"
)

// MockCreateUserHandler is a mock of CreateUserHandler interface.
type MockCreateUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCreateUserHandlerMockRecorder
}

// MockCreateUserHandlerMockRecorder is the mock recorder for MockCreateUserHandler.
type MockCreateUserHandlerMockRecorder struct {
	mock *MockCreateUserHandler
}

// NewMockCreateUserHandler creates a new mock instance.
func NewMockCreateUserHandler(ctrl *gomock.Controller) *MockCreateUserHandler {
	mock := &MockCreateUserHandler{ctrl: ctrl}
	mock.recorder = &MockCreateUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateUserHandler) EXPECT() *MockCreateUserHandlerMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockCreateUserHandler) Invoke(ctx context.Context, req *handler.CreateUserRequest) (*handler.CreateUserResponse, domerr.DomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", ctx, req)
	ret0, _ := ret[0].(*handler.CreateUserResponse)
	ret1, _ := ret[1].(domerr.DomErr)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockCreateUserHandlerMockRecorder) Invoke(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockCreateUserHandler)(nil).Invoke), ctx, req)
}

// MockGetUserInfoHandler is a mock of GetUserInfoHandler interface.
type MockGetUserInfoHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGetUserInfoHandlerMockRecorder
}

// MockGetUserInfoHandlerMockRecorder is the mock recorder for MockGetUserInfoHandler.
type MockGetUserInfoHandlerMockRecorder struct {
	mock *MockGetUserInfoHandler
}

// NewMockGetUserInfoHandler creates a new mock instance.
func NewMockGetUserInfoHandler(ctrl *gomock.Controller) *MockGetUserInfoHandler {
	mock := &MockGetUserInfoHandler{ctrl: ctrl}
	mock.recorder = &MockGetUserInfoHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUserInfoHandler) EXPECT() *MockGetUserInfoHandlerMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockGetUserInfoHandler) Invoke(ctx context.Context, req *handler.GetUserInfoRequest) (*handler.GetUserInfoResponse, domerr.DomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", ctx, req)
	ret0, _ := ret[0].(*handler.GetUserInfoResponse)
	ret1, _ := ret[1].(domerr.DomErr)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockGetUserInfoHandlerMockRecorder) Invoke(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockGetUserInfoHandler)(nil).Invoke), ctx, req)
}
